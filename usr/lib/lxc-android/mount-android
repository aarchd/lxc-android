#!/bin/sh
mkdir -p /dev/cpuset
mount none /dev/cpuset -t cpuset -o nodev,noexec,nosuid

BIND_MOUNT_PATH=/var/lib/lxc/android/rootfs

# On systems with A/B partition layout, current slot is provided via cmdline parameter.
ab_slot_suffix=
if [ -f /proc/bootconfig ]; then
    ab_slot_suffix=$(grep -o 'androidboot\.slot_suffix = ".."' /proc/bootconfig | cut -d '"' -f2)
fi
if [ -z "$ab_slot_suffix" ]; then
    ab_slot_suffix=$(grep -o 'androidboot\.slot_suffix=..' /proc/cmdline |  cut -d "=" -f2)
fi

[ -n "$ab_slot_suffix" ] && echo "A/B slot system detected! Slot suffix is $ab_slot_suffix"

# In case fstab provides /dev/mmcblk0p* lines
disk_dirs="by-partlabel by-name by-label by-path by-uuid by-partuuid by-id"

find_partition_path() {
    label=$1
    for dir in $disk_dirs; do
        # On A/B systems not all of the partitions are duplicated, so we have to check with and without suffix
        path="/dev/disk/$dir/${label}${ab_slot_suffix}"
        if [ -e "$path" ]; then
            printf '%s\n' "$path"
            return
        fi
        path="/dev/disk/$dir/$label"
        if [ -e "$path" ]; then
            printf '%s\n' "$path"
            return
        fi
    done
    printf '/dev/%s\n' "$label"
}

parse_mount_flags() {
    flags=
    IFS=,
    set -- $1
    for opt; do
        case $opt in
            *context*|*trusted*) ;;
            *) flags=${flags:+$flags,}$opt ;;
        esac
    done
    printf '%s\n' "$flags"
}

if [ -n "$BIND_MOUNT_PATH" ] && ! mountpoint -q -- "$BIND_MOUNT_PATH" 2>/dev/null; then
    for img in /userdata/android-rootfs.img /var/lib/lxc/android/android-rootfs.img; do
        if [ -f "$img" ]; then
            mount "$img" "$BIND_MOUNT_PATH" && break
        fi
    done
fi

if [ -e /dev/disk/by-partlabel/super ]; then
    dmsetup create --concise "$(parse-android-dynparts /dev/disk/by-partlabel/super)"
fi

if [ ! -e /vendor/build.prop ]; then
    for img in /userdata/vendor.img /var/lib/lxc/android/vendor.img \
        /dev/disk/by-partlabel/vendor${ab_slot_suffix} /dev/disk/by-partlabel/vendor_a \
        /dev/disk/by-partlabel/vendor_b /dev/mapper/dynpart-vendor \
        /dev/mapper/dynpart-vendor${ab_slot_suffix} /dev/mapper/dynpart-vendor_a \
        /dev/mapper/dynpart-vendor_b; do
    if [ -e "$img" ]; then
        if mount "$img" /vendor -o ro; then
            [ -e /vendor/build.prop ] && break
            umount /vendor
        fi
    fi
done
fi

if [ ! -e /vendor_dlkm/etc/build.prop ]; then
    for img in /dev/mapper/dynpart-vendor_dlkm /dev/mapper/dynpart-vendor_dlkm${ab_slot_suffix} \
        /dev/mapper/dynpart-vendor_dlkm_a /dev/mapper/dynpart-vendor_dlkm_b; do
    if [ -e "$img" ]; then
        if mount "$img" /vendor_dlkm -o ro; then
            [ -e /vendor_dlkm/etc/build.prop ] && break
            umount /vendor_dlkm
        fi
    fi
done
fi

ver=$(uname -r | cut -d. -f1)

printf "checking if system overlay exists"
if [ -d /usr/lib/droid-system-overlay ]; then
    if [ "$ver" -ge 4 ]; then
        mount -t overlay overlay -o lowerdir=/usr/lib/droid-system-overlay:/var/lib/lxc/android/rootfs/system /var/lib/lxc/android/rootfs/system
    else
        mount -t overlay overlay -o lowerdir=/var/lib/lxc/android/rootfs/system,upperdir=/usr/lib/droid-system-overlay,workdir=/var/lib/lxc/android/ /var/lib/lxc/android/rootfs/system
    fi
fi

printf "checking if vendor overlay exists"
if [ -d /usr/lib/droid-vendor-overlay ]; then
    if [ "$ver" -ge 4 ]; then
        mount -t overlay overlay -o lowerdir=/usr/lib/droid-vendor-overlay:/var/lib/lxc/android/rootfs/vendor /var/lib/lxc/android/rootfs/vendor
    else
        mount -t overlay overlay -o lowerdir=/var/lib/lxc/android/rootfs/vendor,upperdir=/usr/lib/droid-vendor-overlay,workdir=/var/lib/lxc/android/ /var/lib/lxc/android/rootfs/vendor
    fi
fi

fstab_files=$(ls /vendor/etc/fstab* 2>/dev/null)
if [ -z "$fstab_files" ]; then
    echo "fstab not found"
    exit 1
fi

if [ -n "$EXTRA_FSTAB" ]; then
    fstab_files="$fstab_files $EXTRA_FSTAB"
fi

while IFS= read -r line; do
    case "$line" in
        "#endhalium") break ;;
        "#"*|"") continue ;;
    esac

    set -- $line
    [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] && continue

    case "$2" in
        /system|/data|/|auto|/vendor|none|/misc|/system_ext|/product|/storage*) continue ;;
    esac

    case "$3" in
        emmc|swap|mtd) continue ;;
    esac

    label=${1##*/}
    [ -z "$label" ] && continue

    path=$(find_partition_path "$label")
    [ ! -e "$path" ] && continue

    mkdir -p "$2"
    mount "$path" "$2" -t "$3" -o "$(parse_mount_flags "$4")"

  # Bind mount on rootfs if we should
  if [ -n "$BIND_MOUNT_PATH" ] && [ "${2#/mnt/}" = "$2" ]; then
      # /mnt is recursively binded via the LXC configuration
      mount -o bind "$2" "$BIND_MOUNT_PATH$2"
  fi
done <<EOF
$(cat $fstab_files 2>/dev/null)
EOF

# vim: set ft=sh ts=4 sw=4 et:
